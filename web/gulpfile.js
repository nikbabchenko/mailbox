var gulp = require('gulp'),
    $ = require('gulp-load-plugins')({lazy: true}),
    browserSync = require('browser-sync'),
    args = require('yargs').argv,
    config = require('./gulp.config')(),
    del = require('del'),
    port = 3000;


gulp.task('styles', ['clean-styles'], function() {
    log('Compiling Sass --> CSS');

    return gulp
        .src(config.sass)
        .pipe($.sass())
        .pipe($.plumber())
        .pipe($.autoprefixer({browsers: ['last 3 version']}))
        .pipe(gulp.dest(config.temp));
});

gulp.task('sass-watcher', function() {
    gulp.watch([config.sass], ['styles']);
});

gulp.task('clean-styles', function() {
    var files = config.temp + '**/*.css';
    clean(files);
});

gulp.task('clean', function() {
    var files = [].concat(
        config.temp + '**/*.js',
        config.temp + '**/*.css',
        config.dist + '**/*.js',
        config.dist + '**/*.css',
        config.dist + '*.html',
        '!' + config.dist + '*.json'
    );

    clean(files);
});

gulp.task('wiredep', function() {
    log('Wire up bower css and  all js files to HTML');

    var options = config.getWiredepOptions();
    var wiredep = require('wiredep').stream;

    return gulp
        .src(config.index)
        .pipe(wiredep(options))
        .pipe($.inject(gulp.src(config.js, {read: false}), {relative: true}))
        .pipe($.inject(gulp.src(config.css, {read: false}), {relative: true}))
        .pipe(gulp.dest(config.dev));
});

gulp.task('inject', ['wiredep', 'styles', 'templatecache', 'sass-watcher'], function() {
    log('Wire up the app css into the html, and call wiredep ');

    return gulp
        .src(config.index)
        .pipe($.inject(gulp.src(config.css, {read: false}), {relative: true}))
        .pipe(gulp.dest(config.dev));
});

gulp.task('jshint', function() {
    log('Analyzing... JSHINT');

    return gulp
        .src(config.alljs)
        .pipe($.if(args.verbose, $.print()))
        .pipe($.jscs())
        .pipe($.jshint())
        .pipe($.jshint.reporter('jshint-stylish'));
});

gulp.task('templatecache', ['clean'], function() {
    log('Creating AngularJS $templateCache');

    return gulp
        .src(config.htmltemplates)
        .pipe($.htmlmin({includeAutoGeneratedTags: false, collapseWhitespace: true}))
        .pipe($.angularTemplatecache(
            config.templateCache.file,
            config.templateCache.options
            ))
        .pipe(gulp.dest(config.temp));
});

gulp.task('ngAnnotateTest', function(){
    return gulp
        .src(config.alljs)
        .pipe($.print())
        .pipe($.ngAnnotate({add: true, single_quotes: true}))
        .pipe($.rename(function(path){
            path.extname= '.annotated.js';
        }))
        .pipe(gulp.dest('./build'));
});

gulp.task('help', function() {
    log('Here you are a list of tasks...');
    $.taskListing();
});

gulp.task('json', function() {
    return gulp
        .src(config.json)
        .pipe(gulp.dest(config.dist));
});

gulp.task('optimize', ['inject', 'json'], function() {
    log('Optimizing the javascript, css, html');

    var templateCache = config.temp + config.templateCache.file;

    return gulp
        .src(config.index)
        .pipe($.plumber())
        .pipe($.inject(gulp.src(templateCache, {read: false}), {name:'templates', relative: true}))
        .pipe($.useref())
        .pipe($.if('js/app.js', $.ngAnnotate({add: true, single_quotes: true})))
        .pipe($.if('*.css', $.csso()))
        .pipe($.if('*.js', $.uglify()))
        .pipe($.if('!*.html', $.rev()))
        .pipe($.revReplace())
        .pipe(gulp.dest(config.dist));
});


gulp.task('serve-dev', ['inject'],  function() {
    startBrowsersync(true /*isDev*/);
});

gulp.task('serve-build', ['optimize'], function() {
    startBrowsersync(false /*isDev*/);
});

/**
 * browserSync
 */

function startBrowsersync (isDev) {
    if (browserSync.active) {
        return;
    }

    log('Starting browserSync port' + port);
    browserSync(config.browserSyncOptions(isDev));
}

/**
 * Show info in console
 */

function log (msg) {
    if(typeof(msg) === 'object') {
        for (var item in msg) {
            if (msg.hasOwnProperty(item)) {
                $.util.log($.util.colors.yellow(msg[item]));
            }
        }
    } else {
        $.util.log($.util.colors.yellow(msg));
    }
}

/**
 * Cleaning path
 */

function clean (path) {
    log('Cleaning: ' + $.util.colors.yellow(path));
    del(path);
}
